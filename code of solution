import java.util.ArrayList;
import java.util.List;

class Solution {
    // Method to return the elements of the matrix in spiral order
    public List<Integer> spiralOrder(int[][] matrix) {
        // Create a list to store the result
        List<Integer> result = new ArrayList<>();

        // Check if the matrix is empty
        if (matrix.length == 0 || matrix[0].length == 0) {
            // If the matrix is empty, return the empty result list
            return result;
        }

        // Initialize the boundaries of the matrix
        int top = 0; // The topmost row we haven't traversed yet
        int bottom = matrix.length - 1; // The bottommost row we haven't traversed yet
        int left = 0; // The leftmost column we haven't traversed yet
        int right = matrix[0].length - 1; // The rightmost column we haven't traversed yet

        // Loop until we have traversed all elements in the matrix
        while (top <= bottom && left <= right) {
            // Step 1: Traverse from left to right along the top row
            for (int i = left; i <= right; i++) {
                // Add the current element to the result list
                result.add(matrix[top][i]);
            }
            // Move the top boundary down after traversing the top row
            top++;

            // Step 2: Traverse from top to bottom along the right column
            for (int i = top; i <= bottom; i++) {
                // Add the current element to the result list
                result.add(matrix[i][right]);
            }
            // Move the right boundary left after traversing the right column
            right--;

            // Step 3: Check if there are rows left to traverse
            if (top <= bottom) {
                // Traverse from right to left along the bottom row
                for (int i = right; i >= left; i--) {
                    // Add the current element to the result list
                    result.add(matrix[bottom][i]);
                }
                // Move the bottom boundary up after traversing the bottom row
                bottom--;
            }

            // Step 4: Check if there are columns left to traverse
            if (left <= right) {
                // Traverse from bottom to top along the left column
                for (int i = bottom; i >= top; i--) {
                    // Add the current element to the result list
                    result.add(matrix[i][left]);
                }
                // Move the left boundary right after traversing the left column
                left++;
            }
        }

        // Return the result list containing the elements in spiral order
        return result;
    }

    // Main method to test the spiralOrder function
    public static void main(String[] args) {
        // Create an instance of the Solution class
        Solution solution = new Solution();

        // Define a sample 2D matrix
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        // Call the spiralOrder method and store the result
        List<Integer> result = solution.spiralOrder(matrix);

        // Print the result to the console
        System.out.println("Spiral Order: " + result); // Expected Output: [1, 2, 3, 6, 9, 8, 7, 4, 5]

        // Additional test case
        int[][] matrix2 = {
            {1, 2, 3, 4},
            {5, 6, 7, 8},
            {9, 10, 11, 12}
        };

        // Call the spiralOrder method with the second matrix
        List<Integer> result2 = solution.spiralOrder(matrix2);

        // Print the result of the second test case
        System.out.println("Spiral Order of second matrix: " + result2); // Expected Output: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]
    }
}
